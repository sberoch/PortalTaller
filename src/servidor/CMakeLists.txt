cmake_minimum_required(VERSION 3.1.0)
project(Portal)

#set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -std=c++11 -Wall -Werror -pedantic -pthread")
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -std=c++11 -pthread")

#message("[INFO] Adding yaml-cpp as a library")
#file(GLOB_RECURSE YAML_SOURCES RELATIVE ${CMAKE_SOURCE_DIR} "libs/yaml-cpp/*.cpp" "libs/yaml-cpp/*.h")
#add_library(yaml-cpp STATIC ${YAML_SOURCES})

message("[INFO] Adding '${CMAKE_SOURCE_DIR}/3rd-party' as include directory")
include_directories(${CMAKE_SOURCE_DIR}/3rd-party)

#message("[INFO] Loading sources to the client")
#file(GLOB_RECURSE CLIENT_SOURCES RELATIVE ${CMAKE_SOURCE_DIR} "src/client/*.cpp" "src/client/*.h")
#file(GLOB CLIENT_LIB_SOURCES RELATIVE ${CMAKE_SOURCE_DIR} "libs/*.h" "libs/*.cpp")

#add_executable(worms_client ${CLIENT_SOURCES}  ${CLIENT_LIB_SOURCES})
#target_link_libraries(worms_client SDL2 SDL2_image SDL2_ttf SDL2_mixer yaml-cpp)

message("[INFO] Adding Box2D as library")
file(GLOB_RECURSE BOX2D_SOURCES RELATIVE ${CMAKE_SOURCE_DIR} "3rd-party/Box2D/*.cpp" "3rd-party/Box2D/*.h")
add_library(Box2D STATIC ${BOX2D_SOURCES})

message("[INFO] Loading sources to the server")
file(GLOB_RECURSE SERVER_SOURCES RELATIVE ${CMAKE_SOURCE_DIR} "server/*.cpp" "server/*.h")
#file(GLOB SERVER_LIBS_SOURCES RELATIVE ${CMAKE_SOURCE_DIR}
#	"libs/Chronometer.*"
#	"libs/CommunicationSocket.*"
#	"libs/DoubleBuffer.*"
#	"libs/ErrorMessages.*"
#	"libs/Exception.*"
#	"libs/GameStateMsg.*"
#	"libs/Observer.*"
#	"libs/Point.*"
#	"libs/Protocol.*"
#	"libs/Socket.*"
#	"libs/Stage.*"
#	"libs/Stream.*"
#	"libs/Subject.*"
#	"libs/Thread.*"
#	"libs/Buffer.*"
#	"libs/utils.*")
#add_executable(worms_server ${SERVER_SOURCES} ${SERVER_LIBS_SOURCES})
add_executable(portal_server ${SERVER_SOURCES})
#target_link_libraries(worms_server Box2D yaml-cpp)
target_link_libraries(portal_server Box2D)

message("[INFO] Loading sources to the editor")

# Find the QtWidgets library
#find_package(Qt5Widgets CONFIG REQUIRED)
#find_package(Qt5Core)

#include_directories(${PROJECT_SOURCE_DIR}/src/editor/Editor)
#qt5_wrap_ui(UIS_HEADERS
#		src/editor/Editor/mainwindow.ui)
# Instruct CMake to run moc automatically when neededcd
#set(CMAKE_AUTOMOC ON)
# Create code from a list of Qt designer ui files
#set(CMAKE_AUTORCC ON)

# Adding directory with the autogenerated headers as include directory
message("[INFO] Adding '${PROJECT_BINARY_DIR}' as include directory")
include_directories(${PROJECT_BINARY_DIR})

message("[INFO] Headers autogenerated: ${UIS_HEADERS}")

#file(GLOB EDITOR_SOURCES RELATIVE ${CMAKE_SOURCE_DIR}
#		        "src/editor/Editor/*.cpp"
#		        "src/editor/Editor/*.h"
#		        "src/editor/Editor/resources.qrc")

# Tell CMake to create the helloworld executable
#add_executable(worms_editor ${EDITOR_SOURCES} ${UIS_HEADERS})
# Use the Widgets module from Qt 5
#target_link_libraries(worms_editor Qt5::Core Qt5::Widgets yaml-cpp)

#file(COPY assets DESTINATION ./)
#file(COPY serverConfig.yaml DESTINATION ./)
#file(COPY defaultWeapons.yaml DESTINATION ./)
#file(COPY res DESTINATION ./)

message("[INFO] Adding Installation directives")
#INSTALL(TARGETS worms_client worms_server worms_editor DESTINATION /usr/bin)
INSTALL(TARGETS portal_server DESTINATION /home/mateo/Escritorio)
#INSTALL(DIRECTORY assets DESTINATION /var/Worms)
#INSTALL(DIRECTORY res DESTINATION /var/Worms)
#INSTALL(FILES defaultWeapons.yaml serverConfig.yaml DESTINATION /etc/Worms)
